#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 08, 2021 09:51:02 PM CST  platform: Windows NT

import sys
import os
import time
import numpy as np
from PIL import Image
from PIL import ImageGrab
import threading
import struct

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

serialPort="COM8"   #串口
baudRate=115200     #波特率
ser=serial.Serial(serialPort,baudRate,timeout=0.5)

last_string = ''

# 数字区域在电脑屏幕上的坐标

loc_VO2 = {'left_top_x': 1740, 'left_top_y': 460, 'right_buttom_x': 1850, 'right_buttom_y': 500}
loc_VCO2 = {'left_top_x': 1740, 'left_top_y': 590, 'right_buttom_x': 1850, 'right_buttom_y': 625}
loc_VE = {'left_top_x': 1740, 'left_top_y': 330, 'right_buttom_x': 1850, 'right_buttom_y': 375}
loc_HR = {'left_top_x': 1740, 'left_top_y': 970, 'right_buttom_x': 1850, 'right_buttom_y': 1005}

# 二值化阈值，自定义阈值为150, 小于150的是白色0 大于的是黑色1
threshold = 150
# 二值化对照表
bin_table = []
for i in range(256):
    if i < threshold:
        bin_table.append(0)
    else:
        bin_table.append(1)

# 标准Hash码
hash_vals = {
    "0": "111000111000000110111100001111000011111000111110011111100111111001111110001111100011111000111100001111001001100111000011",
    "1": "111111001111000000000000001110001111100011111000111110001111100011111000111110001111100011111000111110001111100011111000",
    "2": "110001111000000101111100111111001111110011111100111110011111000111100011110011111001111100111111001111110000000000000000",
    "3": "110001111000000111111001111111011111110111111001111100111000011111111001111111001111110011111100111111000011000100000111",
    "4": "111111111111101111110011111100111110101111101011110010111101101110111011001110110000000000000000111110111111101111111011",
    "5": "111111111000000110111111101111111011111110111111100001110000000111111000111111001111110011111100111111010011000100000111",
    "6": "111100011100000110011111001111110011111100111111010000110001100100111100011111000111110000111100001111001001100111000011",
    "7": "111111110000000011111100111111011111100111111001111100111111001111110111111001111110011111101111110011111100111111001111",
    "8": "111001111000000100111101001111000011110010111101100000011000000100111100011111000111111001111110001111000001100111000011",
    "9": "110001111000000100111001011111000111110001111100001111000011100010000000111111001111110011111101111110010010001100000111",
    ".": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000"
}


def get_screenshot(var_num):
    if var_num == 1:
        var_image = ImageGrab.grab(
            [loc_VO2['left_top_x'], loc_VO2['left_top_y'], loc_VO2['right_buttom_x'], loc_VO2['right_buttom_y']])
    elif var_num == 2:
        var_image = ImageGrab.grab(
            [loc_VCO2['left_top_x'], loc_VCO2['left_top_y'], loc_VCO2['right_buttom_x'], loc_VCO2['right_buttom_y']])
    elif var_num == 3:
        var_image = ImageGrab.grab(
            [loc_VE['left_top_x'], loc_VE['left_top_y'], loc_VE['right_buttom_x'], loc_VE['right_buttom_y']])
    elif var_num == 4:
        var_image = ImageGrab.grab(
            [loc_HR['left_top_x'], loc_HR['left_top_y'], loc_HR['right_buttom_x'], loc_HR['right_buttom_y']])
    return var_image


def get_img(img):
    box_o2 = ([loc_VO2['left_top_x'], loc_VO2['left_top_y'], loc_VO2['right_buttom_x'], loc_VO2['right_buttom_y']])
    box_co2 = ([loc_VCO2['left_top_x'], loc_VCO2['left_top_y'], loc_VCO2['right_buttom_x'], loc_VCO2['right_buttom_y']])
    box_oe = ([loc_VE['left_top_x'], loc_VE['left_top_y'], loc_VE['right_buttom_x'], loc_VE['right_buttom_y']])
    # box_hr = ([loc_HR['left_top_x'], loc_HR['left_top_y'], loc_HR['right_buttom_x'], loc_HR['right_buttom_y']])
    image_vo2 = img.crop(box_o2)
    image_vco2 = img.crop(box_co2)
    image_ve = img.crop(box_oe)
    # image_hr = img.crop(box_hr)
    return image_vo2, image_vco2, image_ve #, image_hr


def binarize(img, threshold=threshold):
    """二值化"""
    # 图像的二值化，就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的只有黑和白的视觉效果。

    img = img.convert('L')  # 模式“L” 为灰色图像,它的每个像素用8个bit表示,0表示黑,255表示白,其他数字表示不同的灰度。
    # img.point 返回图像的副本，参数1：每个像素通过给定的bin_table表映射。该表应包含图像中每个波段的256个值。
    #                         参数2：仅当源图像的模式为“L”或“P”且输出的图像模式为“1”或源图像的模式为“I”且输出模式为“L”时，才可以使用此选项
    bin_img = img.point(bin_table, '1')
    return bin_img


def vertical_cut(img):
    """纵向切割"""

    # 黑白反转
    px = list(np.sum(np.array(img) == 0, axis=0))  # 列 像素累加值
    py = list(np.sum(np.array(img) == 0, axis=1))  # 行 像素累加值
    # print('px',px)
    # print('py',py)
    #
    # 列表保存像素累加值大于0的列
    x0 = []
    for x in range(len(px)):
        if px[x] > 0:
            x0.append(x)
    # print('x0',x0)

    y0 = []
    for y in range(len(py)):
        if py[y] > 1:
            y0.append(y)
    # print('y0',y0)

    if len(x0) == 0:
        return []

    # 找出边界
    cut_list = [x0[0]]
    for i in range(1, len(x0)):
        if abs(x0[i] - x0[i - 1]) > 1:
            # if abs(x0[i-1] - cut_list[-1]) < 35:
            cut_list.extend([x0[i - 1] + 1, x0[i]])
    cut_list.append(x0[-1] + 1)

    cut_list_y = [y0[0]]
    cut_list_y.append(y0[-1] + 1)

    # print('cut_list_y',cut_list_y)

    cut_imgs = []
    # 切割顺利的话应该是整对
    if len(cut_list) % 2 == 0:
        for i in range(len(cut_list) // 2):  # 每张图片的左右边界
            cut_img = img.crop([cut_list[i * 2], cut_list_y[0], cut_list[i * 2 + 1], cut_list_y[1]])
            cut_imgs.append(cut_img)
        return cut_imgs
    else:
        print('Vertical cut failed.')
        return []


def hashing(img):
    """计算哈希值"""
    # img.resize((width, height),Image.ANTIALIAS)  第二个参数：Image.NEAREST ：低质量 Image.BILINEAR：双线性 Image.BICUBIC ：三次样条插值 Image.ANTIALIAS：高质量
    img = img.resize((8, 15), Image.LANCZOS)
    px = np.array(img).flatten()  # flatten()把数组降到一维，默认是按行的方向降
    hash_val = (px).astype(int)
    hash_val = ''.join(str(e) for e in hash_val)  # 以''作为分隔符，将hash_val所有的元素合并成一个新的字符串，返回值：返回一个以分隔符''连接各个元素后生成的字符串
    return hash_val


def hamming(hash1, hash2):
    """计算汉明距离"""
    if len(hash1) != len(hash2):
        print('hash1: ', hash1)
        print('hash2: ', hash2)
        raise ValueError("Undefined for sequences of unequal length")  # 异常
    # 返回hash1[i]!=hash2[i]的个数 两个等长字符串s1与s2之间的汉明距离定义为将其中一个变为另外一个所需要作的最小替换次数。例如字符串“1111”与“1001”之间的汉明距离为2。
    return sum(i != j for i, j in zip(hash1, hash2))


def recognize(img):
    """识别部分"""
    if img:
        img = binarize(img)
        chars = vertical_cut(img)
        # print ('chars',chars)
        # 相近度列表
        nearness = {}
        expr = ''
        value = 0
        if chars:
            for char in chars:
                hash_val = hashing(char)
                # print ('hash_val',hash_val)
                for h in hash_vals:
                    nearness[h] = hamming(hash_val, hash_vals[h])
                expr += sorted(nearness.items(), key=lambda d: d[1])[0][0]
            return expr, float(expr)
        else:
            return '0', 0.0
    else:
        return '0', 0.0


def OCRloop():
    while 1:
        if ui.State == 1:

            Image_VO2 = []
            Image_VCO2 = []
            Image_VE = []
            Image_HR = []

            if ui.VO2.get() == 1:
                Image_VO2 = get_screenshot(1)
            if ui.VCO2.get() == 1:
                Image_VCO2 = get_screenshot(2)
            if ui.VE.get() == 1:
                Image_VE = get_screenshot(3)
            if ui.HR.get() == 1:
                Image_HR = get_screenshot(4)

            VO2_string,  V02_value  = recognize(Image_VO2)
            VCO2_string, VCO2_value = recognize(Image_VCO2)
            VE_string,   VE_value   = recognize(Image_VE)
            HR_string,   HR_value   = recognize(Image_HR)

            res_string = VO2_string + ',' + VCO2_string + ',' + VE_string + ',' + HR_string + '\n'
            ui.Text.insert(tk.END, res_string)
            ui.Text.see(tk.END)
            Data = [int(V02_value), int(VCO2_value), int(VE_value*10), int(HR_value),int((V02_value+VCO2_value+VE_value*10+HR_value)%256)]
            buffer = struct.pack("hhhBB", *Data)
            ser.write(buffer)
        time.sleep(0.2)



def setState():
    ui.State = 1


def resetState():
    ui.State = 0


class pyHigherGUI:
    def __init__(self):

        self.top = tk.Tk()

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.VO2 = tk.IntVar()
        self.VCO2 = tk.IntVar()
        self.VE = tk.IntVar()
        self.HR = tk.IntVar()
        self.State = 0

        self.top.geometry("398x222+532+258")
        self.top.minsize(120, 1)
        self.top.maxsize(1924, 1061)
        self.top.resizable(0,  0)
        self.top.title("pyHigher - 102Lab OCR Software")
        self.top.configure(background="#3f3f3f")
        self.top.configure(highlightbackground="#d9d9d9")
        self.top.configure(highlightcolor="black")

        self.StartButton = tk.Button(self.top, command = setState)
        self.StartButton.place(x=300, y=50, height=58, width=79)
        self.StartButton.configure(activebackground="#ececec")
        self.StartButton.configure(activeforeground="#000000")
        self.StartButton.configure(background="#acacac")
        self.StartButton.configure(disabledforeground="#a3a3a3")
        self.StartButton.configure(font="-family {Microsoft YaHei UI} -size 12 -weight bold")
        self.StartButton.configure(foreground="#ffffff")
        self.StartButton.configure(highlightbackground="#d9d9d9")
        self.StartButton.configure(highlightcolor="#000000")
        self.StartButton.configure(pady="0")
        self.StartButton.configure(text='''Start''')

        self.StopButtom = tk.Button(self.top, command = resetState)
        self.StopButtom.place(x=302, y=140, height=58, width=79)
        self.StopButtom.configure(activebackground="#ececec")
        self.StopButtom.configure(activeforeground="#000000")
        self.StopButtom.configure(background="#acacac")
        self.StopButtom.configure(disabledforeground="#a3a3a3")
        self.StopButtom.configure(font="-family {Microsoft YaHei UI} -size 12 -weight bold")
        self.StopButtom.configure(foreground="#ffffff")
        self.StopButtom.configure(highlightbackground="#d9d9d9")
        self.StopButtom.configure(highlightcolor="black")
        self.StopButtom.configure(pady="0")
        self.StopButtom.configure(text='''Stop''')

        self.Text = tk.Text(self.top)
        self.Text.place(x=20, y=50, height=152, width=259)
        self.Text.configure(background="#7f7f7f")
        self.Text.configure(font="-family {Microsoft YaHei UI} -size 10 -weight bold")
        self.Text.configure(foreground="#ffffff")
        self.Text.configure(highlightbackground="#ffffff")
        self.Text.configure(highlightcolor="black")
        self.Text.configure(insertbackground="black")
        self.Text.configure(relief="flat")
        self.Text.configure(selectbackground="blue")
        self.Text.configure(selectforeground="#ffffff")
        self.Text.configure(wrap="word")

        self.VO2Check = tk.Checkbutton(self.top)
        self.VO2Check.place(x=20, y=10, height=27, width=63)
        self.VO2Check.configure(activebackground="#ececec")
        self.VO2Check.configure(activeforeground="#000000")
        self.VO2Check.configure(background="#3f3f3f")
        self.VO2Check.configure(disabledforeground="#a3a3a3")
        self.VO2Check.configure(font="-family {Microsoft YaHei UI} -size 9 -weight bold")
        self.VO2Check.configure(foreground="#ffffff")
        self.VO2Check.configure(highlightbackground="#acacac")
        self.VO2Check.configure(highlightcolor="#000000")
        self.VO2Check.configure(justify='left')
        self.VO2Check.configure(offrelief="flat")
        self.VO2Check.configure(selectcolor="#acacac")
        self.VO2Check.configure(text='''VO2''')
        self.VO2Check.configure(variable=self.VO2)
        # self.VO2Check.configure(onvalue='1')
        # self.VO2Check.configure(offvalue='0')

        self.VCO2Check = tk.Checkbutton(self.top)
        self.VCO2Check.place(x=80, y=10, height=27, width=63)
        self.VCO2Check.configure(activebackground="#ececec")
        self.VCO2Check.configure(activeforeground="#000000")
        self.VCO2Check.configure(background="#3f3f3f")
        self.VCO2Check.configure(disabledforeground="#a3a3a3")
        self.VCO2Check.configure(font="-family {Microsoft YaHei UI} -size 9 -weight bold")
        self.VCO2Check.configure(foreground="#ffffff")
        self.VCO2Check.configure(highlightbackground="#acacac")
        self.VCO2Check.configure(highlightcolor="black")
        self.VCO2Check.configure(justify='left')
        self.VCO2Check.configure(selectcolor="#acacac")
        self.VCO2Check.configure(text='''VCO2''')
        self.VCO2Check.configure(variable=self.VCO2)

        self.VECheck = tk.Checkbutton(self.top)
        self.VECheck.place(x=140, y=10, height=27, width=63)
        self.VECheck.configure(activebackground="#ececec")
        self.VECheck.configure(activeforeground="#000000")
        self.VECheck.configure(background="#3f3f3f")
        self.VECheck.configure(disabledforeground="#a3a3a3")
        self.VECheck.configure(font="-family {Microsoft YaHei UI} -size 9 -weight bold")
        self.VECheck.configure(foreground="#ffffff")
        self.VECheck.configure(highlightbackground="#acacac")
        self.VECheck.configure(highlightcolor="black")
        self.VECheck.configure(justify='left')
        self.VECheck.configure(selectcolor="#acacac")
        self.VECheck.configure(text='''VE''')
        self.VECheck.configure(variable=self.VE)

        self.HRCheck = tk.Checkbutton(self.top)
        self.HRCheck.place(x=200, y=10, height=27, width=63)
        self.HRCheck.configure(activebackground="#ececec")
        self.HRCheck.configure(activeforeground="#000000")
        self.HRCheck.configure(background="#3f3f3f")
        self.HRCheck.configure(disabledforeground="#a3a3a3")
        self.HRCheck.configure(font="-family {Microsoft YaHei UI} -size 9 -weight bold")
        self.HRCheck.configure(foreground="#ffffff")
        self.HRCheck.configure(highlightbackground="#acacac")
        self.HRCheck.configure(highlightcolor="black")
        self.HRCheck.configure(justify='left')
        self.HRCheck.configure(selectcolor="#acacac")
        self.HRCheck.configure(text='''HR''')
        self.HRCheck.configure(variable=self.HR)

if __name__ == '__main__':


    ui = pyHigherGUI()

    OCR_thread = threading.Thread(target=OCRloop)
    OCR_thread.setDaemon(True)
    OCR_thread.start()

    ui.top.mainloop()







